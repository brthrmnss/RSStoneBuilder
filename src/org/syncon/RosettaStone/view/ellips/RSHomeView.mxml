<?xml version="1.0" encoding="utf-8"?>
<controls:ScreenView xmlns:mx="http://www.adobe.com/2006/mxml"
					 xmlns:controls="openplug.elips.controls.*"
					 width="100%" height="100%" 
					 xmlns:alarm="org.syncon.TalkingClock.view.mobile.alarm.*"
					 xmlns:screenClasses="openplug.elips.controls.screenClasses.*"
					 xmlns:view="org.syncon.TalkingClock.view.mobile.view.*"
					 creationComplete="onInit(event)" xmlns:ellips="org.syncon.RosettaStone.view.ellips.*" xmlns:view1="mvc.view.*">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ThemeVO;
			import org.syncon.TalkingClock.model.NightStandConstants;
			
			import outside.PlatformGlobals;
			
			static public const TRY_AGAIN : String = 'tryAgain' ; 
			static public const SETTINGS : String = 'settings'
			static public const CHANGE_USER : String = 'CHANGE_USER'
			static public const PROGRESS : String = 'PROGRESS'				
			static public const GO_BACK : String = 'goBack'; 
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const RESUME : String = 'RESUME'; 
			static public const INFO : String = 'INFO'; 
			static public const SELECT_LESSON : String = 'SELECT_LESSON'; 
			static public const DEBUG : String = 'DEBUG'; 
			static public const MENU : String = 'MENU'; 
			
			protected function onInit(event:FlexEvent):void
			{
				NightStandConstants.PlatformGlobals.fxMediate( this  ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnResume, this.onResume ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnSelectLesson, this.onSelectLesson ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.txtLogoTagLine, this.onDebug ) ; 			
				
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnSettings, this.onSettings ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnProgress, this.onProgress ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnChangeUser, this.onChangeUser ) ;
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnMenu, this.onMenu ) ;
				this.btnProgress.visible = false; 
				this.btnChangeUser.visible = false; 
				
				timer.addEventListener(TimerEvent.TIMER, this.onWaited ) 
					this.timer.start(); 
			}
			private var timer : Timer = new Timer(250, 1 ) 
			override public function set visible( b : Boolean ) : void{
				super.visible = b; 
			}
			protected function list1_itemClickHandler(event: Event):void
			{
				var data : Object = NightStandConstants.PlatformGlobals.getItemClickEventData( event ) 
				this.dispatchEvent( new CustomEvent(LIST_CHANGED, data  )  ) 
			}
			
			public function onBack() : void
			{
				this.dispatchEvent( new Event( GO_BACK ) ) ; 
			}
			
			public function onTryAgain() : void
			{
				this.dispatchEvent( new Event( TRY_AGAIN ) ) ; 
			}
			
			protected function view1_activateHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			
			protected function onSettings(e:Event):void
			{
				this.dispatchEvent( new Event( SETTINGS ) ) ; 
			}
			
			
			protected function onChangeUser(e:Event):void
			{
				this.dispatchEvent( new Event( CHANGE_USER ) ) ; 
			}
			protected function onMenu(e:Event):void
			{
				this.dispatchEvent( new Event( MENU ) ) ; 
			}
			
			
			protected function onProgress(e:Event):void
			{
				this.dispatchEvent( new Event( PROGRESS ) ) ; 
			}
			
			
			protected function onInfo():void
			{
				this.dispatchEvent( new Event( INFO ) ) ; 
			}
			protected function onResume(event:Event):void
			{
				this.dispatchEvent( new Event( RESUME ) ) ; 
			}
			protected function onSelectLesson(event:Event):void
			{
				this.dispatchEvent( new Event( SELECT_LESSON ) ) ; 
			}
			protected function onDebug(event:Event):void
			{
				this.dispatchEvent( new Event( DEBUG ) ) ; 
			}
			
			
			protected function onWaited(event:TimerEvent):void
			{
				// TODO Auto-generated method stub
				this.timer.stop()
				this.btnSelectLesson.labelS = this.btnSelectLesson.labelS
					this.btnResume.onInit()
				var o : DisplayObjectContainer = this.btnSelectLesson.parent
					o.removeChild( this.btnSelectLesson ) 
						o.addChild( this.btnSelectLesson ) ; 
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%" backgroundColor="0xE8E9EA">
		<mx:Canvas width="100%" backgroundColor="0xEB5018" height="42">
			<mx:Canvas backgroundColor="0x0" height="42">
				<controls:Label color="0xE8E9EA" fontSize="36" text="MLL"/>
			</mx:Canvas>
			<mx:HBox>
				
			</mx:HBox>
		</mx:Canvas>
		<mx:VBox paddingLeft="10" width="100%">
			
			<!--<mx:Spacer height="50" />-->
			<!--
			<controls:Text text="...The easiest way to master a language" fontStyle="italic" />
			-->
			<controls:Text  id="txtLogoTagLine" text="...master a language on your phone" fontStyle="italic" />
			
			<ellips:OpenPlugButton id="btnSelectLesson" minWidth="50"  
								   iconS="" labelS="Select Lesson"/>
			
			<ellips:OpenPlugButton id="btnResume"   minWidth="50"  
								   iconS="assets/buttons/63-runner.png"
								   labelS="Resume Previous Lesson"/>
			
			<ellips:OpenPlugButton id="btnProgress"  minWidth="50"  
								   labelS="Progress"/>
			
			<ellips:OpenPlugButton id="btnChangeUser"   minWidth="50"  
								   labelS="Change User"/>
			
			<ellips:OpenPlugButton id="btnSettings"   minWidth="50"  
								   iconS="assets/buttons/20-gear2.png"
								   labelS="Settings"/>
			<ellips:OpenPlugButton id="btnMenu"   minWidth="50"  
								   iconS="assets/buttons/20-gear2.png"
								   labelS="Menu"/>
		</mx:VBox>
	</mx:VBox>
	
	<view1:NavigationBar label="Quizboard"  width="100%"/>
	
	
	
	<controls:Label id="debug"  right="0" bottom="100"  text="Debug"/>
	
</controls:ScreenView>