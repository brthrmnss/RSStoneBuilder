<?xml version="1.0" encoding="utf-8"?>
<rs:PopupBase xmlns:mx="http://www.adobe.com/2006/mxml"
			  xmlns:rs="org.syncon.RosettaStone.view.ellips.rs.*"
			  width="100%" height="100%" creationComplete="onInit()" xmlns:controls="openplug.elips.controls.*" xmlns:view="org.syncon.TalkingClock.view.mobile.view.*" xmlns:ellips="org.syncon.RosettaStone.view.ellips.*">
	
	
	<mx:Script>
		<![CDATA[
			import org.syncon.RosettaStone.vo.LessonVO;
			import org.syncon.TalkingClock.model.NightStandConstants;
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const OK : String = 'save'; 	
			static public const CANCEL : String = 'cancel'; 	
			static public const SETUP : String = 'setup'; 	
			
			static public const REPEAT : String = 'REPEAT'; 	
			static public const NEXT_LESSON : String = 'NEXT_LESSON'; 	
			static public const GO_HOME : String = 'GO_HOME'; 	
			
			public function onInit() : void 
			{
				this.creationComplete = true; 
				//this.popupCode.center()
				//NightStandConstants.PlatformGlobals.fxMediate( this  ) ; 
				
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnRepeat, this.onRepeat ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnNext, this.onNext ) ; 
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnHome, this.noHome ) ; 
			}
			
/* 			public  function create(app:Object)  : IPopup
			{
				var popup :  PopupSelectionResult = new PopupSelectionResult()
				popup.popupCode =  PopupCode.Create( popup ,app ) 
				return popup			
			} 
			
			private var _popupCode :   PopupCode; 
			public function get  popupCode () : PopupCode { return _popupCode  } 
			public function set  popupCode ( _popupCode_ : PopupCode) : void {   _popupCode = _popupCode_  } */ 
			
/* 			
			protected function onSave(event:Event=null):void
			{
				this.dispatchEvent( new Event( OK) ) 
			}
			
			protected function onCancel(event:Event=null):void
			{
				this.dispatchEvent( new Event( CANCEL ) ) 
			} */
			
			
			public var args : Array = [] ; 
			private var fxDone:Function;
			public var lesson : LessonVO
			public function done(   fxDone : Function = null ) : void
			{
				/* this.width =  this.parentApplication.width*.8
				this.height =  this.parentApplication.height*.8 */
				this.dispatchEvent( new Event (SETUP   )) 
				this.show()
				this.lesson = lesson; 
				this.fxDone = fxDone; 
			}
			
			protected function onRepeat(event:Event=null):void
			{
				this.dispatchEvent( new Event( REPEAT ) ) 
			}
			
			protected function onNext(event:Event=null):void
			{
				this.dispatchEvent( new Event( NEXT_LESSON ) )  
			}
			
			protected function noHome(event:Event=null):void
			{
				this.dispatchEvent( new Event( GO_HOME ) ) 
			}			
			
		]]>
	</mx:Script>
	
	
	<!--<popup:PopupBg alpha="0.56"/>-->
	<mx:Canvas width="100%" height="100%"> 
		
		<mx:VBox paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
			<controls:Label color="0xFFFFFF" fontSize="24" text="Section Complete"/>
			<controls:Label  id="txtLessonName" color="0xFFFFFF" fontSize="24" text=""/>
			<!--<s:HGroup>
			<mobile:TextAreaLabel2 id="txtCorrect" fontSize="24" />
			<mobile:TextAreaLabel2 text="%"  />
			
			</s:HGroup>-->
			<!--<s:HGroup>
			<mobile:TextAreaLabel2 id="txtCorrect" />
			<s:Label  text="correct" />
			</s:HGroup>-->
			<mx:VBox>
				<ellips:OpenPlugButton  iconS="assets/buttons/reload.png"  labelS="Repeat Lesson"
									  id="btnRepeat"   />
				<ellips:OpenPlugButton  iconS="assets/buttons/arrowright.png"  labelS="Continue to Next Lesson"
									  id="btnNext"  />
				<ellips:OpenPlugButton  iconS="assets/buttons/home.png" labelS="Return to Home Screen" 
									  id="btnHome"   />
		</mx:VBox>
		</mx:VBox>
		
		
		
		
		
		<!--	<s:filters>
		<s:DropShadowFilter alpha="0.9" angle="45.0" blurX="4.0" blurY="4.0" color="#0"
		distance="4.0" hideObject="false" inner="false" knockout="false"
		quality="2" strength="1"/> 
		</s:filters> -->
	</mx:Canvas>
	
</rs:PopupBase>