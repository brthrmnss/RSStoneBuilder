<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:mvc="mvc.*"
		   xmlns:TalkingClock="org.syncon.TalkingClock.*"
		   xmlns:mobile="org.syncon.RosettaStone.view.mobile.*"
		   xmlns:view="org.syncon.TalkingClock.view.mobile.view.*"
		   xmlns:rs="org.syncon.RosettaStone.view.ellips.rs.*"
		   xmlns:ellips="org.syncon.RosettaStone.view.ellips.*"
		   xmlns:mob="openplug.elips.controls.*"
		   xmlns:alarm="org.syncon.TalkingClock.view.mobile.alarm.*"
		   xmlns:view1="mvc.view.*"
		   width="100%" height="100%" creationComplete="onInit()" initialize="onInitliaize(event)">
	<!--
	creationComplete="onInit()" firstView="org.syncon.odb.view.mobile.ListView">
	-->
	<!--
	firstView="org.syncon.odb.view.mobile.TextAreaTestView">
	-->
	<mx:Script>
		<![CDATA[
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Parallel;
			import mx.events.FlexEvent;
			
			import openplug.elips.device.Capabilities;
			
			import org.syncon.TalkingClock.model.NightStandConstants;
			import org.syncon2.utils.mobile.ads.Smaato.SmaatoProvider;
			
			import outside.PlatformGlobals;
			//public var adMob : AdMob; 
			private var showAds:Boolean = true;
			/**
			 * true if on my phone
			 * */
			private var myPhone:Boolean;
			/**
			 * Get me Ads
			 * */
			static public  var   GetDeviceId  : Function; 
			
			protected function onInitliaize(event:FlexEvent):void
			{
			}
			
			protected function holder_initializeHandler(event:FlexEvent):void
			{
				if ( this.holder.hasOwnProperty('isCreatingAllChildren' )  == false ) 
					return; 
				// TODO Auto-generated method stub
				this.holder['isCreatingAllChildren'] = false; 
				this.holder.setStyle(' isCreatingAllChildren', false ) ; 
			}
			
			protected function onInit():void
			{
				//this.ss = new SmaatoProvider()
				NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.img, this.onClickImg ) ; 
				NightStandConstants.PlatformGlobals.fxMediate( this ) ; 
				
				//NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.btnChange, this.onTestMove ) ; 
				
				
				this.loadAds()
				//th emeidate will call this when ready with config 
				
				var duration : Number = 350
				for   ( var i : int = 0; i <  this.holder.numChildren; i++ ) 
				{
					var o : Object = this.holder.getChildAt( i ) 
					var m : Move = new Move(o); 
					m.xFrom = this.width; 
					m.xTo = 0 ; 
					m.yFrom = 0; 
					m.yTo = 0 ; 
					//o.setStyle('showEffect',   m ) ;  
					m.duration = duration 
					
					var f1 : Fade = new Fade()
					f1.alphaFrom =0; 
					f1.alphaTo = 1; 
					f1.duration = duration 
					var p1 : Parallel		= new Parallel()
					p1.duration = duration 
					p1.children = [ m, f1 ] 
					o.setStyle('showEffect',   p1 ) ;  
					
					
					
					//this.view.showEffect = m
					var m2 : Move = new Move(o); 
					m2.xFrom = 0;//this.width; 
					m2.xTo = -this.width ; 
					m2.duration = duration 
					m2.yFrom = 0; 
					m2.yTo = 0 ; 
					//o.setStyle('hideEffect',   m2 ) ;  
					
					var f2 : Fade = new Fade()
					f2.alphaFrom = 1; 
					f2.alphaTo = 0; 
					f2.duration = duration 
					var p2 : Parallel		= new Parallel()
					p2.duration = duration 
					p2.children = [ m2, f2 ] 
					o.setStyle('hideEffect',   p2 ) ;  
					
				}
			}
			
			/**
			 * inits the ads, called by mediator 
			 * */
			public function loadAds() : void
			{
				this.myPhone = NightStandConstants.personalMachine
				var bbbbb : Object =  openplug.elips.device.Capabilities.getDeviceCapabilities()
				var bb : String = openplug.elips.device.Capabilities.getDeviceCapabilities().os.name
				var onC : Boolean = NightStandConstants.PlatformGlobals.onComputer; 
				if ( this.myPhone == false && onC == false ) 
				{
					this.inTestingMode(); 
				}
				else
				{
					NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.adBg, this.onAdAddifInDebug ) ; 
					if ( onC == false ) 
						this.inTestingMode(false); 
				}
			}		
			private function inTestingMode(loadReal :  Boolean = true    ):void
			{
				//URLRequestDefaults
				SmaatoProvider.DEVICE = ''; // URLRequestDefaults.userAgent;
				/* ss  = new SmaatoProvider( 0, 0, 60, false, true )  
				ss.addEventListener( Event.CHANGE, onSmaatoProviderChanged, false, 0, true); */
				if ( loadReal  ) 
				{
					ss  = new SmaatoProvider( 923846506, 65744800, 60*5, false, true )  
					//ss.ownid =  SystemAPI.getDeviceUID()
					ss.ownid = GetDeviceId()
					ss.addEventListener( Event.CHANGE, onSmaatoProviderChanged, false, 0, true);
				}
				else
				{
					ss  = new SmaatoProvider( 0, 0, 60*5, false, true )  
					
					ss.addEventListener( Event.CHANGE, onSmaatoProviderChanged, false, 0, true);
				}
				// TODO Auto Generated method stub
				
			}
			
			[Bindable] public var ss : SmaatoProvider; 
			private function onClickImg(e:Event):void
			{
				// TODO Auto Generated method stub
				this.ss.onSmaatoAdClicked(null)	
			}
			
			public function onSmaatoProviderChanged(evt:Event, wait : Boolean = true):void
			{
				if ( wait ) 
				{
					this.callLater( this.onSmaatoProviderChanged, [evt, false ] ) 
					return
				}
				// Optional handler triggered when the banner is updated.
				// Can be used for moving the banner around
				/* 
				trace("sm.variables.devip = " + sm.variables.devip);
				_debugTxt.text = evt.target.ipProvider.listNetworkInfo(false) + "\n\n" + sm.data;
				_debugTxt.appendText("\n\nGeolocation.isSupported = " + Geolocation.isSupported );
				
				if ( (Geolocation.isSupported) && (sm.geo) )
				{
				_debugTxt.appendText( "\nmuted = " + sm.geo.muted +
				"\ngps = " + sm.variables.gps );
				}
				
				trace(_debugTxt.text);
				*/
				/* 
				try
				{
				this.img.source = this.ss.content; 
				this.img.height = 80
				this.img.width = this.width;  
				return;
				}
				catch( e : Error ) 
				{
				trace('normal failed'); 
				}
				*/
				// Reposition the ad (to the bottom of the sreen)
				/* 	with(evt.target)
				{ */
				//img.y = this.stage.stageHeight - contentLoaderInfo.height;
				//	img.x = (this.stage.stageWidth - contentLoaderInfo.width) * 0.5;
				//img.source = this.ss.data; 
				try 
				{
					//this.ss.content
					
					//img.source = this.ss.content
					
					//var imgBD:BitmapAsset = new img();
					
					
					
					if ( objBit != null && objBit.bitmapData != null ) 
						objBit.bitmapData.dispose(); 
					objBit = new Bitmap();
					objBit.bitmapData = new BitmapData(this.ss.content.width, this.ss.content.height,true, 0xffffff);
					objBit.bitmapData.draw(this.ss.content, new Matrix(),null, null, null, true);
					oRect = new Rectangle(0,0,this.ss.content.width,this.ss.content.height);
					oPoint = new Point(0, 0);
					if ( cBit != null ) 
						cBit.dispose() 						
					cBit = new BitmapData(this.ss.content.width, this.ss.content.height,true, 0xffffff);
					cBit.copyPixels(objBit.bitmapData,oRect,oPoint);
					
					var b : BitmapAsset = new BitmapAsset(); 
					b.bitmapData = cBit; 
					//this.adBg.graphics.beginBitmapFill(
					img.source = b;  
					img.width = this.width; 
					img.height = 80
					
					
					
					
					/* 
					obj = new Object();
					obj.x = 300;
					obj.y = 300;
					objBit = new Bitmap();
					objBit.bitmapData = new BitmapData(20, 20,true, 0xffffff);
					objBit.bitmapData.draw(this.ss.content, new Matrix());
					obj.width = objBit.width;
					obj.height = objBit.height;
					oRect = new Rectangle(0,0,obj.width,obj.height);
					oPoint = new Point(obj.x, obj.y);
					
					cRect = new Rectangle(0,0,480,800);
					cPoint = new Point(0,0);
					bg = new BitmapData(480,800,false,0x5a5a5a);
					canv= new BitmapData(480,800,false,0xff0000);
					var canvBit:Bitmap = new Bitmap(canv);
					
					Scene.addChild(canvBit);
					
					
					timer = new Timer(17,0);
					timer.addEventListener(TimerEvent.TIMER, loop);
					timer.start(); */
					/* 	
					img.height = this.ss.content.height; 
					img.width = this.ss.content.width;  
					*/
				}
				catch ( e : Error  ) 
				{
					trace('error loading ad')
				}
				/* img.height = this.ss.content.height; 
				img.width = this.ss.content.width;  */
				/* 
				if ( NightStandConstants.PlatformGlobals.onComputer == false ) 
				{
				img.width = this.width;
				//img.height = 80;
				//img.height = this.height; 
				}
				*/
				/* } */
				return;
			}
			
			private function onAdAddifInDebug(e:Event):void
			{
				if ( this.myPhone  ) 
				{
					trace('onAdAddifInDebug' , 'trying to load ad' ) ; 
					this.inTestingMode()
					//NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.adBg, this.onAdAddifInDebug ) ; 	
				}
				if (   NightStandConstants.PlatformGlobals.onComputer ) 
				{
					trace('onAdAddifInDebug' , 'trying to load ad' ) ; 
					this.inTestingMode(false)
					//NightStandConstants.PlatformGlobals.addPlatformClickEvent( this.adBg, this.onAdAddifInDebug ) ; 	
				}
				// TODO Auto Generated method stub
				
			}
			
			
			
			
			import flash.display.Bitmap;
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			private var bg:BitmapData;
			private var canv:BitmapData;
			private var cRect:Rectangle;
			private var cPoint:Point;
			
			private var obj:Object;
			private var objBit:Bitmap;
			private var cBit : BitmapData
			private var oRect:Rectangle;
			private var oPoint:Point;
			
			private var vx:Number = 10;
			private var vy:Number = 10;
			
			private var s:Sprite;
			private var timer:Timer;
			
			//[Embed(source="logo.png")]private var img:Class;
			public function init():void
			{
				/* var imgBD:BitmapAsset = new img();
				
				obj = new Object();
				obj.x = 300;
				obj.y = 300;
				objBit = new Bitmap();
				objBit.bitmapData = new BitmapData(20, 20,true, 0xffffff);
				objBit.bitmapData.draw(imgBD, new Matrix());
				obj.width = objBit.width;
				obj.height = objBit.height;
				oRect = new Rectangle(0,0,obj.width,obj.height);
				oPoint = new Point(obj.x, obj.y);
				
				cRect = new Rectangle(0,0,480,800);
				cPoint = new Point(0,0);
				bg = new BitmapData(480,800,false,0x5a5a5a);
				canv= new BitmapData(480,800,false,0xff0000);
				var canvBit:Bitmap = new Bitmap(canv);
				
				Scene.addChild(canvBit);
				
				
				timer = new Timer(17,0);
				timer.addEventListener(TimerEvent.TIMER, loop);
				timer.start(); */
			}
			
			private function loop(e:Event):void
			{
				if(canv!=null)
				{
					canv.lock();
					canv.copyPixels(bg,cRect,cPoint);
					renderObject();
					
					//move
					
					obj.x+=vx;
					obj.y+=vy;
					
					if(obj.x<0 || obj.x>480-obj.width)vx*=-1;
					if(obj.y<0 || obj.y>800-obj.height)vy*=-1;
					
					canv.unlock();
				}
				
			}
			
			private function renderObject():void
			{
				oPoint.x = obj.x;
				oPoint.y = obj.y;
				canv.copyPixels(objBit.bitmapData,oRect,oPoint);
			}
			
			
			private function onTestMove(e: Event):void
			{
				// TODO Auto Generated method stub
				//this.holder.selectedChild = this.canvas1; 
				var bdg : Array = [] ; 
				for   ( var i : int = 0; i <  this.holder.numChildren; i++ ) 
				{
					var o : Object = this.holder.getChildAt( i ) 
					bdg.push(o.getStyle('showEffect' ) )   
					bdg.push(o.getStyle('hideEffect' ) )   
				}
				return;
			}
			
		]]>
	</mx:Script>
	<!--	<mx:Fade id="Fader" />-->
	<!--<mx:AnimateProperty id="m1" fromValue="-480" toValue="0" property="x" />
	<mx:AnimateProperty id="m2" fromValue="0" toValue="480" property="x" />-->
	<!--	<mx:Move id="m1" xFrom="{this.width}" yFrom="0" xTo="0" yTo="0" />
	<mx:Move id="m2" xTo="{this.width}" yFrom="0" xFrom="0" yTo="0" />-->
	<!-- search for showeffect -->
	<mx:ViewStack id="holder" width="100%" top="0" bottom="80"  
				  initialize="holder_initializeHandler(event)">
		<alarm:SoundBoardHomeView id="view" width="100%" height="100%"   hideEffect="Fade" showEffect="Fade"/>
		<!--
		<alarm:QuizBoardHomeView id="home" width="100%" height="100%"/>
		<alarm:QuizBoardListView id="list" width="100%" height="100%"/>
		-->
		
		<!--
		<ellips:PackageCurriculumView id="curriculum" width="100%" height="100%"/> 
		<ellips:PlayerView id="playerView2" width="100%" height="100%" autoStart="false"/>
		<rs:PopupLessonComplete id="popupLessonComplete"/>
		<rs:PopupGroupComplete id="popupGroupComplete"/>
		<rs:PopupUnitComplete id="popupUnitComplete"/>
		
		-->
		<alarm:PopupRingtoneActionView   id="popupRingToneAction" width="100%" height="100%"  hideEffect="Fade" showEffect="Fade" />
		<ellips:SettingsView id="settings" width="100%" height="100%"  hideEffect="Fade" showEffect="Fade"   />
		
		<ellips:GettingStartedView id="gettingStarted"/>
		<ellips:PopupMenuActionView  id="menu"  width="100%" height="100%"   hideEffect="Fade" showEffect="Fade"/>
		<!--<mx:Canvas id="canvas1" backgroundColor="#CCFFFF"  width="100%" height="100%"   hideEffect="Fade" showEffect="Fade">-->
			<!--<mx:showEffect>
			<mx:Move xFrom="{this.width}" yFrom="0" xTo="0" yTo="0" />
			</mx:showEffect>-->
		<!--</mx:Canvas>-->
	</mx:ViewStack>
	
	<!--
	<mob:Button label="asdf" id="btnChange" />
	-->
	
	<!--
	<mx:Canvas id="mainNav" width="100%" height="100%">
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
	<view:NavigationBar id="bbox"/>
	<mx:ViewStack id="screenx" width="100%"
	height="{this.height-bbox.height-this.nav.height}">
	<view:NewsList id="frontPage" width="100%" height="100%" label="News"
	added="frontPage_addedHandler(event)" baseSection="News Top Stories"
	creationComplete="frontPage_creationCompleteHandler(event)"/>
	<view:NewsList id="sportsPage" width="100%" height="100%" label="Sports"
	baseSection="Sports News"/>
	<view:NewsList id="localPage" width="100%" height="100%" label="Local"
	baseSection="Around Town Top Stories"/>
	<view:NewsList id="otherNewsPage" width="100%" height="100%" label="News"/>
	<view:About id="aboutPage" width="100%" height="100%"/>
	</mx:ViewStack>
	<view:SectionNavigator id="nav" dp="{this.screenx}"/>
	</mx:VBox>
	
	</mx:Canvas>	
	
	
	<mx:ViewStack id="screenStory" visible="false" width="100%" height="100%">
	<view:StoryViewer id="story"/>
	</mx:ViewStack>
	
	-->
	
	<mx:Canvas  id="adBg" bottom="0" width="100%" height="80" backgroundColor="0x000000">
		<mob:Image id="img" bottom="0" horizontalCenter="0"/>
	</mx:Canvas>
</mx:Canvas>
