<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:mvc="mvc.*"
		   xmlns:odb="org.syncon.odb.*"
		   xmlns:alarm="org.syncon.TalkingClock.view.mobile.alarm.*"
		   xmlns:TalkingClock="org.syncon.TalkingClock.*"
		   xmlns:mobile="org.syncon.RosettaStone.view.mobile.*"
		   xmlns:view="org.syncon.TalkingClock.view.mobile.view.*"
		   width="100%" height="100%" creationComplete="onInit()" initialize="onInitliaize(event)" xmlns:rs="org.syncon.RosettaStone.view.ellips.rs.*" xmlns:ellips="org.syncon.RosettaStone.view.ellips.*">
	<!--
	creationComplete="onInit()" firstView="org.syncon.odb.view.mobile.ListView">
	-->
	<!--
	firstView="org.syncon.odb.view.mobile.TextAreaTestView">
	-->
	<mx:Script>
		<![CDATA[
			import mvc.controller.SwitchScreensCommand;
			import mvc.controller.SwitchScreensTriggerEvent;
			
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.events.FlexEvent;
			
			import org.syncon.RosettaStone.Context_RSPlayer;
			import org.syncon.RosettaStone.controller.ConfigCommand;
			import org.syncon.TalkingClock.ContextNightStand_AlarmsViewsSubContext;
			import org.syncon.TalkingClock.model.NightStandConstants;
			import org.syncon.TalkingClock.view.mobile.alarm.SoundBoardHomeView;
			import org.syncon.popups.controller.default_commands.ShowAlertMessageCommand2;
			import org.syncon2.utils.file.LoadConfig_Flex;
			import org.syncon2.utils.openplug.PlatformGlobals_Flex;
			import org.syncon2.utils.sound.PlaySound_Flex;
			//public var adMob : AdMob; 
			private var showAds:Boolean = true;
			
			protected function onInitliaize(event:FlexEvent):void
			{
				//Context.debugging = true;
				NightStandConstants.flex = true; 
				LoadConfig_Flex.baseFolder = 'G:/My Documents/work/mobile3/SoundboardFlex/bin-debug/assets/'
				ConfigCommand.CONFIG_LOCATION =  'G:/My Documents/work/mobile3/SoundboardFlex/bin-debug/assets/'
				ShowAlertMessageCommand2.fxAlert = Alert.show; //
				NightStandConstants.PlatformGlobals = new PlatformGlobals_Flex()
				NightStandConstants.PlatformGlobals.setFxMediate( this.context.mapMediator ) ; 
				NightStandConstants.PlaySound = new PlaySound_Flex(); 
				//NightStandConstants.PlaySound.fxChangeSoundLocation = getProxy; 
			}
			
			static public var  serverBase : String = 'http://localhost:7126/'
			public static function getProxy(url:String):URLRequest
			{
				var req:URLRequest = new URLRequest(serverBase+"play_sound");
				//req.method = URLRequestMethod.POST;
				
				var postData:URLVariables = new URLVariables();
				postData.url =url
				req.data = postData;
				
				return req;
			}
			public function fxChangeSound( url : String ) : URLRequest
			{
				return null; 
			}
			
			protected function onInit():void
			{
				SwitchScreensCommand.fxSwitchScreens = this.changeView; 
				
				//InitMainContextCommand.AirFeaturesClass = AirOnlyFeatures
				//NightStandConstants.FileLoader = new LoadConfig()
				var viewContext : ContextNightStand_AlarmsViewsSubContext = new ContextNightStand_AlarmsViewsSubContext();
				this.context.addSubContext( viewContext ) ; 
				
				
				
				/* 
				var contextPopups : ContextNightStand_PopupContext = new ContextNightStand_PopupContext();
				this.context.addSubContext( contextPopups ) ; 
				*/
				//var t :  Array = [Capabilities.version, File.applicationDirectory.nativePath]
				//if ( File.applicationDirectory.nativePath.indexOf('G:') == 0 )
				//{
				NightStandConstants.debug = true
				NightStandConstants.loadFolder = 'jjudy'
				NightStandConstants.FileLoader = new  LoadConfig_Flex(); 
				//NightStandConstants.loadFolder = 'gow'
				//}
				SwitchScreensCommand.appSelectedItem = this.getSelectedItem; 
				SwitchScreensCommand.app = this; 
				this.importRsStuff(); 
				/* if ( NightStandConstants.flex ) 
					this.context.reloadSubContext() */
				return; 
				/* 
				//var x : ContextHackerNews_ServiceSubContext = new ContextHackerNews_ServiceSubContext()
				var x :  ContextODB_ServiceSubContext2 = new ContextODB_ServiceSubContext2()
				x.test = true; 
				var ee : ScriptureVO
				ScriptureVO.Test(); 
				var xx : ContextODB_MobileViewsSubContext = new ContextODB_MobileViewsSubContext()
				//xx.test = true; 				
				//var xxx : ContextNightStand_PopupContext = new ContextNightStand_PopupContext()
				this.context.addSubContext( x ) 
				this.context.addSubContext( xx ) 
				//this.context.addSubContext( xxx ) 
				var o : Object = this.getChildAt(0 )
				//	o  = o.getChildAt(0 )
				//		o = this.navigator.navigationContent;
				this.context.mapMediator( o );
				if ( Capabilities.isDebugger)
				showAds = false 
				this.context.showAds = showAds;  
				*/
				
				/* this.navigator.inject(  DevotionView )
				this.navigator.inject(  ScriptureView )
				this.navigator.inject(  Mp3Player ) */
				
			}
			protected function addToStage(event:Event):void
			{
				/* 	if ( this.showAds ) 
				this.adMob = new AdMob('http://city-21.com/admob.html', this.stage)
				ViewNavigator
				this.context.loadConfig(   ) ; 
				this.navigator as ViewNavigator
				var precache : Array = [DevotionView, ScriptureView, Mp3PlayerView, SettingsView]; 
				for each ( var clazz : Class in precache )
				{
				this.navigator['inject'](clazz)
				} */
			}
			
			public function getSelectedItem() : Object
			{
				return this.holder.selectedChild
			}
			
			
			protected var currentScreen : String = ''; 
			public function changeView(screen : String, data : Object = null ):void
			{
				var defaultScreen : String = 'holder'; //or top index ....
				if ( currentScreen == screen ) 
					return; 
				if ( screen == '' ) 
					screen = this.holder.getChildAt( 0  )['id']
				var o :  Container = this[screen]
				this.holder.selectedChild = o; 
				o.data = data; 
				this.currentScreen = screen; 
				if ( o.hasOwnProperty('showing' ) ) 
				{
					o['showing'](); 
				}
				o.dispatchEvent( new Event('showing')); 
				/* 
				this.mainNav.visible = false 
				this.screenStory.visible = false; 
				
				if ( screen == SwitchScreensTriggerEvent.SCREEN_STORY_VIEWER   ) 
				{
				this.screenStory.visible = true 
				//	return; 
				}								
				
				if ( [defaultScreen, SwitchScreensTriggerEvent.SCREEN_STORY_1,SwitchScreensTriggerEvent.SCREEN_STORY_2,
				SwitchScreensTriggerEvent.SCREEN_STORY_3,SwitchScreensTriggerEvent.SCREEN_STORY_4,
				SwitchScreensTriggerEvent.SCREEN_ABOUT].indexOf( screen ) != -1   )
				{
				this.mainNav.visible = true 
				var newIndex : int  = 0; 
				if ( screen ==SwitchScreensTriggerEvent.SCREEN_STORY_1 || screen == defaultScreen   ) 
				{
				newIndex = 0
				}
				if ( screen ==SwitchScreensTriggerEvent.SCREEN_STORY_2   ) 
				{
				newIndex = 1
				}
				if ( screen ==SwitchScreensTriggerEvent.SCREEN_STORY_3   ) 
				{
				newIndex = 2
				}
				if ( screen ==SwitchScreensTriggerEvent.SCREEN_STORY_4   ) 
				{
				newIndex = 3
				}
				if ( screen ==SwitchScreensTriggerEvent.SCREEN_ABOUT   ) 
				{
				newIndex = 4
				}	
				
				this.screenx.selectedIndex = newIndex; 
				
				}
				*/
				//this.lastScreen = this.currentScreen 					
				this.currentScreen = screen; 
			}
			
			protected function frontPage_addedHandler(event:Event):void
			{
				trace('frontPage_addedHandler')
			}
			
			protected function frontPage_creationCompleteHandler(event:FlexEvent):void
			{
				trace('frontPage_creationCompleteHandler')
			}
			
			
			private function importRsStuff():void
			{
				import org.syncon.RosettaStone.model.NightStandConstants;
				org.syncon.RosettaStone.model.NightStandConstants.ResourcesDir = 'assets/'
				org.syncon.RosettaStone.model.NightStandConstants.FileLoader = new  LoadConfig_Flex(); 
				var rsContext : Context_RSPlayer = new Context_RSPlayer();
				this.context.addSubContext( rsContext ) ; 
				rsContext.fxGettingStarted = onGettingStarted
				//this.changeView(SwitchScreensTriggerEvent.SELECT_PACKAGE)
				//this.callLater( this.addRSDefaultScreens ) 
			}
			
			public function onGettingStarted () : void
			{
				this.callLater( this.context.dispatchEvent, [SwitchScreensTriggerEvent.GoTo( SwitchScreensTriggerEvent.gettingStarted )] ) 
			}
			private function addRSDefaultScreens():void
			{
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoBack( ) ) ; 
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.exitView )  ) ; 
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.home )  ) ; 
				//this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.SELECT_PACKAGE )  ) ;
			}
			
		]]>
	</mx:Script>
	
	
	<!--<mx:Style source="styles/Main.css"/>
	<mx:Style source="styles/font.css"/>-->
	<!--	<odb:ContextODB id="context" contextView="{this}"/>
	-->
	<!--<mvc:NewsAppContext2 id="context" contextView="{this}"/> -->
	<TalkingClock:ContextNightStand id="context" contextView="{this}"
									
									soundMode="{false}"
									debugging="true" wait__="true"/> 
	<!--<mx:Label text="Yay"/>-->
	
	<mx:ViewStack id="holder" width="100%" height="100%" creationPolicy="all">
		<ellips:RSHomeView id="home" />
		
		<alarm:SoundBoardHomeView id="view" width="100%" height="100%"/>
		<alarm:PopupRingtoneActionView id="popupRingToneAction" width="100%" height="100%"/>
		<alarm:PopupMenuActionView id="popupMenuAction" width="100%" height="100%"/>
		<!--<alarm:PopupMenuActionView id="playerView" width="100%" height="100%"/>-->
		<!--	<mobile:PlayerView id="playerView" width="100%" height="100%"/> -->		
		<ellips:PackageSelectView id="packageSelectView" width="100%" height="100%"/> 
		<ellips:GroupSelectView id="groupSelectView" width="100%" height="100%"/> 
		<ellips:LessonSelectView id="lessonSelectView" width="100%" height="100%"/> 
		<ellips:PackageCurriculumView id="curriculum" width="100%" height="100%"/> 
		<ellips:PlayerView autoStart="false" id="playerView2" width="100%" height="100%"/>
		<rs:PopupLessonComplete  id="popupLessonComplete"/>
		<rs:PopupGroupComplete  id="popupGroupComplete"/>
		<rs:PopupUnitComplete id="popupUnitComplete" />
		
		<ellips:ExitView id="exitView" />
		
		<ellips:SettingsView id="settings" />
		<ellips:GettingStartedView id="gettingStarted" />
		<ellips:PopupMenuActionView id="menu" />
	</mx:ViewStack>
	
	<!--
	<mx:Canvas id="mainNav" width="100%" height="100%">
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
	<view:NavigationBar id="bbox"/>
	<mx:ViewStack id="screenx" width="100%"
	height="{this.height-bbox.height-this.nav.height}">
	<view:NewsList id="frontPage" width="100%" height="100%" label="News"
	added="frontPage_addedHandler(event)" baseSection="News Top Stories"
	creationComplete="frontPage_creationCompleteHandler(event)"/>
	<view:NewsList id="sportsPage" width="100%" height="100%" label="Sports"
	baseSection="Sports News"/>
	<view:NewsList id="localPage" width="100%" height="100%" label="Local"
	baseSection="Around Town Top Stories"/>
	<view:NewsList id="otherNewsPage" width="100%" height="100%" label="News"/>
	<view:About id="aboutPage" width="100%" height="100%"/>
	</mx:ViewStack>
	<view:SectionNavigator id="nav" dp="{this.screenx}"/>
	</mx:VBox>
	
	</mx:Canvas>	
	
	
	<mx:ViewStack id="screenStory" visible="false" width="100%" height="100%">
	<view:StoryViewer id="story"/>
	</mx:ViewStack>
	
	-->
	
	
</mx:Canvas>
