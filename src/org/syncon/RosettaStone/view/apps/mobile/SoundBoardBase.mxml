<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:mvc="mvc.*" 
		   xmlns:TalkingClock="org.syncon.TalkingClock.*"
		   xmlns:mobile="org.syncon.RosettaStone.view.mobile.*"
		   xmlns:view="org.syncon.TalkingClock.view.mobile.view.*"
		   xmlns:rs="org.syncon.RosettaStone.view.ellips.rs.*"
		   xmlns:ellips="org.syncon.RosettaStone.view.ellips.*"
		   xmlns:mob="openplug.elips.controls.*"
		    creationComplete="onInit()" initialize="onInitliaize(event)" xmlns:alarm="org.syncon.TalkingClock.view.mobile.alarm.*">
	<!--
	creationComplete="onInit()" firstView="org.syncon.odb.view.mobile.ListView">
	-->
	<!--
	firstView="org.syncon.odb.view.mobile.TextAreaTestView">
	-->
	<mx:Script>
		<![CDATA[
			import mvc.controller.SwitchScreensCommand;
			import mvc.controller.SwitchScreensTriggerEvent;
			
			import mx.containers.ViewStack;
			import mx.core.Container;
			import mx.events.FlexEvent;
			
			import org.syncon.RosettaStone.Context_RSPlayer;
			import org.syncon.RosettaStone.controller.ConfigCommand;
			import org.syncon.TalkingClock.ContextNightStand_AlarmsViewsSubContext;
			import org.syncon.TalkingClock.model.NightStandConstants;
			import org.syncon.TalkingClock.view.mobile.alarm.SoundBoardHomeView;
			import org.syncon.popups.controller.default_commands.ShowAlertMessageCommand2;
			//public var adMob : AdMob; 
			private var showAds:Boolean = true;
			
			protected function onInitliaize(event:FlexEvent):void
			{
				
				
				
			}
			
			static public var  serverBase : String = 'http://localhost:7126/'
			public static function getProxy(url:String):URLRequest
			{
				var req:URLRequest = new URLRequest(serverBase+"play_sound");
				//req.method = URLRequestMethod.POST;
				
				var postData:URLVariables = new URLVariables();
				postData.url =url
				req.data = postData;
				
				return req;
			}
			public function fxChangeSound( url : String ) : URLRequest
			{
				return null; 
			}
			
			protected function onInit():void
			{
				SwitchScreensCommand.fxSwitchScreens = this.changeView; 
				
				//InitMainContextCommand.AirFeaturesClass = AirOnlyFeatures
				//NightStandConstants.FileLoader = new LoadConfig()
				var viewContext : ContextNightStand_AlarmsViewsSubContext = new ContextNightStand_AlarmsViewsSubContext();
				this.context.addSubContext( viewContext ) ; 
				
				
				
				/* 
				var contextPopups : ContextNightStand_PopupContext = new ContextNightStand_PopupContext();
				this.context.addSubContext( contextPopups ) ; 
				*/
				//var t :  Array = [Capabilities.version, File.applicationDirectory.nativePath]
				//if ( File.applicationDirectory.nativePath.indexOf('G:') == 0 )
				//{
				//}
				SwitchScreensCommand.appSelectedItem = this.getSelectedItem; 
				SwitchScreensCommand.app = this; 
				
				SwitchScreensTriggerEvent.SkipHistoryOn = [SwitchScreensTriggerEvent.menu]
				SwitchScreensTriggerEvent.AltActions[SwitchScreensTriggerEvent.menu] = this.GoToMenu 
				this.importRsStuff(); 
				/* if ( NightStandConstants.flex ) 
				this.context.reloadSubContext() */
				return; 
				/* 
				//var x : ContextHackerNews_ServiceSubContext = new ContextHackerNews_ServiceSubContext()
				var x :  ContextODB_ServiceSubContext2 = new ContextODB_ServiceSubContext2()
				x.test = true; 
				var ee : ScriptureVO
				ScriptureVO.Test(); 
				var xx : ContextODB_MobileViewsSubContext = new ContextODB_MobileViewsSubContext()
				//xx.test = true; 				
				//var xxx : ContextNightStand_PopupContext = new ContextNightStand_PopupContext()
				this.context.addSubContext( x ) 
				this.context.addSubContext( xx ) 
				//this.context.addSubContext( xxx ) 
				var o : Object = this.getChildAt(0 )
				//	o  = o.getChildAt(0 )
				//		o = this.navigator.navigationContent;
				this.context.mapMediator( o );
				if ( Capabilities.isDebugger)
				showAds = false 
				this.context.showAds = showAds;  
				*/
				
				/* this.navigator.inject(  DevotionView )
				this.navigator.inject(  ScriptureView )
				this.navigator.inject(  Mp3Player ) */
				
			}
			protected function addToStage(event:Event):void
			{
				/* 	if ( this.showAds ) 
				this.adMob = new AdMob('http://city-21.com/admob.html', this.stage)
				ViewNavigator
				this.context.loadConfig(   ) ; 
				this.navigator as ViewNavigator
				var precache : Array = [DevotionView, ScriptureView, Mp3PlayerView, SettingsView]; 
				for each ( var clazz : Class in precache )
				{
				this.navigator['inject'](clazz)
				} */
			}
			
			public function getSelectedItem() : Object
			{
				return this.holder.selectedChild
			}
			
			
			protected var currentScreen : String = ''; 
			public function changeView(screen : String, data : Object = null ):void
			{
				var defaultScreen : String = 'holder'; //or top index ....
				if ( currentScreen == screen ) 
					return; 
				if ( screen == '' ) 
					screen = this.holder.getChildAt( 0  )['id']
				if ( this.holderParent != null ) 
				{
					o = holderParent[screen]
				}
				else
				{
					var o :  Container = this[screen]
				}
				this.holder.selectedChild = o; 
				o.data = data; 
				this.currentScreen = screen; 
				if ( o.hasOwnProperty('showing' ) ) 
				{
					o['showing'](); 
				}
				o.dispatchEvent( new Event('showing')); 
				
				this.currentScreen = screen; 
			}
			
			protected function frontPage_addedHandler(event:Event):void
			{
				trace('frontPage_addedHandler')
			}
			
			protected function frontPage_creationCompleteHandler(event:FlexEvent):void
			{
				trace('frontPage_creationCompleteHandler')
			}
			
			
			private function importRsStuff():void
			{
				import org.syncon.RosettaStone.model.NightStandConstants;
				org.syncon.RosettaStone.model.NightStandConstants.ResourcesDir = 'assets/'
				org.syncon.RosettaStone.model.NightStandConstants.FileLoader = org.syncon.TalkingClock.model.NightStandConstants.FileLoader
				var rsContext : Context_RSPlayer = new Context_RSPlayer();
				if ( this._quizMode ) 
					rsContext.loadUnitsFolder = false; 
				this.context.addSubContext( rsContext ) ; 
				rsContext.fxGettingStarted = onGettingStarted
				//this.changeView(SwitchScreensTriggerEvent.SELECT_PACKAGE)
				this.callLater( this.addRSDefaultScreens ) 
			}
			
			public function onGettingStarted () : void
			{
				this.callLater( this.context.dispatchEvent, [SwitchScreensTriggerEvent.GoTo( SwitchScreensTriggerEvent.gettingStarted )] ) 
			}
			private function addRSDefaultScreens():void
			{
				return
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoBack( ) ) ; 
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.exitView )  ) ; 
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.home )  ) ; 
				//this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.SELECT_PACKAGE )  ) ;
			}
			
			public function GoToMenu() : void
			{
				var arrOfMenuItems :Object = null 
				var _holder : Object = this.holder; 
				if ( this.holderParent != null ) 
				{
					_holder = holderParent;
				}
				if ( _holder[this.currentScreen] != null ) 
				{
					if ( _holder[this.currentScreen].hasOwnProperty('menuProvider2') ) 
						arrOfMenuItems = _holder[this.currentScreen]['menuProvider2']
				}
				this.context.dispatchEvent( SwitchScreensTriggerEvent.GoTo( SwitchScreensTriggerEvent.menu, arrOfMenuItems, true )  ) 
					//this.asdf(); 
					//goToScreen2( 	 SwitchScreensTriggerEvent.GoTo(SwitchScreensTriggerEvent.menu )  )   
			}
			
			/**
			 * 
			 * */
			public function goToView( e :  Event  ) : void
			{
				this.context.dispatchEvent(  e  ) ; 
			}
			
			protected function holder_initializeHandler(event:FlexEvent):void
			{
				if ( this.holder.hasOwnProperty('isCreatingAllChildren' )  == false ) 
					return; 
				// TODO Auto-generated method stub
				this.holder['isCreatingAllChildren'] = false; 
				this.holder.setStyle(' isCreatingAllChildren', false ) ; 
			}
			
			public var holder : ViewStack;
			/**
			 * An elsewhere viewStack
			 * */
			public var holderParent:Object;
			private var _quizMode:Boolean;
			
			public function set quizMode( b : Boolean  ) : void
			{
				this._quizMode = true ;
			}
		]]>
	</mx:Script>
 
	<TalkingClock:ContextNightStand id="context" contextView="{this}" debugging="true"
									soundMode="{false}" wait__="true"/> 
 
	
</mx:Canvas>
