<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  
				height="60"
				autoDrawBackground="false">
	
	
	<fx:Script> 
		<![CDATA[ 
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonGroupVO;
			import org.syncon.RosettaStone.vo.LessonVO;
			import org.syncon.RosettaStone.vo.PromptDefinitionVO;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const COPY_FILTER : String = 'COPY_FILTER';
			
			public var help : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var prompt :  PromptDefinitionVO = new PromptDefinitionVO()
			override public function set data(value:Object):void { 
				super.data = value; 
				this.help.listenForObj(value,PromptDefinitionVO.UPDATED, this.updateItemRenderer )
				prompt = value as PromptDefinitionVO
				this.help.disableIfNull( value, new PromptDefinitionVO, 'prompt' )  
				this.updateItemRenderer()
			} 
			
			
			public function updateItemRenderer(e:Event=null)  : void
			{
				this.txtName.text = this.prompt.name.toString()
				this.txtDesc.text = this.prompt.desc.toString()
					this.txtId.text = this.prompt.id.toString() 
			//		this.txtTerm.text = this.prompt.searchTerm; 
				if (this.selected == false && this.currentState == 'selected' )
					this.currentState = ''; 
				
				setFields(); 
			}
			
			protected function onUp():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_UP, this.prompt ) ) ; 
			}
			protected function onDown():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_DOWN, this.prompt ) ) ; 
			}
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.prompt ) ) ; 
			}			
			
			protected function onCopy():void
			{
				this.dispatchEvent( new CustomEvent( COPY_FILTER, this.prompt ) ) ; 
			}		
			
			private function setFields() : void
			{
				this.chk_PromptRequired.selected = this.prompt.required_prompt 
				this.chk_ImagetRequired.selected = this.prompt.required_image 
				this.chk_SoundtRequired.selected = this.prompt.required_sound 
				this.chk_TxtRequired.selected = this.prompt.required_other 
			}
			
			protected function ch_Visible_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				this.prompt.required_prompt = this.chk_PromptRequired.selected; 
				this.prompt.required_image = this.chk_ImagetRequired.selected; 
				this.prompt.required_sound = this.chk_SoundtRequired.selected; 
				this.prompt.required_other = this.chk_TxtRequired.selected; 
				this.prompt.updated(); 
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		
		<s:Transition toState="*" >
			<s:Fade targets="{[this.bgRect]}"   easer="{sineIn}"
					duration="350" />
		</s:Transition>
		
		
		<s:Transition toState="*" >
			<s:AnimateColor targets="{[this.txtName, this.txtDesc ]}"   easer="{this.sineIn}"
							duration="350" />
		</s:Transition>		
		
	</s:transitions>		
	
	<s:Rect id="bgRect"  width="100%" height="100%"  alpha.normal="0" >
		<s:fill>
			<s:SolidColor color="0x598E52"  color.hovered="0x598E52"  color.selected="0x36722E"/>
		</s:fill>
	</s:Rect>
	
	<s:VGroup>
		
		
		<s:HGroup verticalAlign="middle" verticalCenter="0" >
			
			
			
			<!--<s:Label id="seperator" text="|" color="0x6E6E6E"  />-->
			<s:Label id="txtId" width="25" />
			<s:TextInput id="txtName" color="0"    verticalCenter="0"  
						 change="{this.prompt.name = this.txtName.text}"
						 useHandCursor="true" width="160"   prompt="Name"
						 buttonMode="true" x="5"
						 fontSize="12" />
			
			<s:CheckBox id="chk_PromptRequired" label="P" change="ch_Visible_changeHandler(event)" />
			<s:CheckBox id="chk_ImagetRequired" label="Img" change="ch_Visible_changeHandler(event)" />
			<s:CheckBox id="chk_SoundtRequired" label="Snd" change="ch_Visible_changeHandler(event)" />
			<s:CheckBox id="chk_TxtRequired" label="O" change="ch_Visible_changeHandler(event)" />
			
			
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle">
			<s:TextArea id="txtDesc" color="0"     width="160" height="30" verticalCenter="0"
						useHandCursor="true"    prompt="Description" 
						change="{this.prompt.desc = this.txtDesc.text}"
						buttonMode="true" textAlign="left"
						fontSize="12"   /> 
			<s:Button width="30"  label="U" click="onUp()" />
			<s:Button width="30" label="D" click="onDown()" />
			<s:Button width="30" label="X" click="onDelete()" />		
			<s:Button width="30" label="C" click="onCopy()" />
		</s:HGroup>
		<!--
		<s:HGroup verticalAlign="middle">
			<s:TextArea id="txtTerm" color="0"     width="160" height="30" verticalCenter="0"
						useHandCursor="true"    prompt="Description" 
						change="{this.prompt.searchTerm = this.txtTerm.text}"
						buttonMode="true" textAlign="left"
						fontSize="12"   /> 
		</s:HGroup>
		
-->	</s:VGroup>
</s:ItemRenderer>
