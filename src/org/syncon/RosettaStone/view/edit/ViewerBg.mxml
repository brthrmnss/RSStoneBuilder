<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  
				height="30"
				autoDrawBackground="false">
	
	
	<fx:Script> 
		<![CDATA[ 
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.TalkingClock.vo.FilterVO;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const COPY_FILTER : String = 'COPY_FILTER';
			
			[Bindable] public var filter :    FilterVO = new FilterVO()
			override public function set data(value:Object):void { 
				super.data = value; 
				if (value== null)  
				{
					this.filter.removeEventListener( FilterVO.UPDATED, this.updateItemRenderer ) 
					return; 
				}
				if ( this.filter != null ) 
				{
					this.filter.removeEventListener( FilterVO.UPDATED, this.updateItemRenderer ) 
				}
				
				filter = value as FilterVO
				
				this.filter.addEventListener( FilterVO.UPDATED, this.updateItemRenderer , false, 0, true) 	
				this.updateItemRenderer()
			} 
			
			
			public function updateItemRenderer(e:Event=null)  : void
			{
		/* 		if ( e.currentTarget
					this.filter;  */
				txtLbl.text = this.filter.name.toString()
					this.ch_Visible.selected = this.filter.visible; 
					var f : String = 'f';  
					if ( this.filter.glow )
					{
						f = 'g'
					}
					else if ( this.filter.blur ) 
					{
						f  = 'b'
					}
					else if ( this.filter.shadow ) 
					{
						f = 'd' 
					}
					 lblCount.text = f; 
			/* 	this.lblCount.text = this.notebook.noteCount.toString();
				if ( this.notebook.name.toLowerCase() == 'all notebooks' ) 
					this.txtLbl.setStyle('fontStye', 'italic' ) 
				else
					this.txtLbl.setStyle('fontStyle', 'normal' )  */
			}
			
			
			protected function ch_Visible_changeHandler(event:Event):void
			{
				this.filter.visible = this.ch_Visible.selected; 
				this.dispatchEvent( new CustomEvent( CHANGED_FILTER_FROM_RENDERER, this.filter ) ) ; 
			}
			
			protected function onUp():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_UP, this.filter ) ) ; 
			}
			protected function onDown():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_DOWN, this.filter ) ) ; 
			}
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.filter ) ) ; 
			}			
			
			protected function onCopy():void
			{
				this.dispatchEvent( new CustomEvent( COPY_FILTER, this.filter ) ) ; 
			}		
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		
		<s:Transition toState="*" >
			<s:Fade targets="{[this.bgRect]}"   easer="{sineIn}"
					duration="350" />
		</s:Transition>
		
		
		<s:Transition toState="*" >
			<s:AnimateColor targets="{[this.txtLbl, this.lblCount ]}"   easer="{this.sineIn}"
							duration="350" />
		</s:Transition>		
		
	</s:transitions>		
	
	<s:Rect id="bgRect"  width="100%" height="100%"  alpha.normal="0" >
		<s:fill>
			<s:SolidColor color="0x598E52"  color.hovered="0x598E52"  color.selected="0x36722E"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup verticalAlign="middle" verticalCenter="0" paddingLeft="5" paddingRight="5">
		

	
	<!--<s:Label id="seperator" text="|" color="0x6E6E6E"  />-->
	<s:Label id="txtLbl" color="0"    verticalCenter="0"  
			 color.hovered="0xFFFFFFF" color.selected="0xFFFFFFF" 
			 useHandCursor.hovered="true" width="160"  
			 buttonMode.hovered="true" x="5"
			 fontSize="12" />
 	<s:Label id="lblCount" color="0"     width="15" verticalCenter="0"
			 color.hovered="0xFFFFFFF"  color.selected="0xFFFFFFF" 
			 useHandCursor.hovered="true" 
			 buttonMode.hovered="true" textAlign="right"
			 fontSize="12"   /> 
		<s:CheckBox id="ch_Visible" change="ch_Visible_changeHandler(event)" />
		<s:Button width="30"  label="U" click="onUp()" />
		<s:Button width="30" label="D" click="onDown()" />
		<s:Button width="30" label="X" click="onDelete()" />		
		<s:Button width="30" label="C" click="onCopy()" />	
	</s:HGroup>
</s:ItemRenderer>
