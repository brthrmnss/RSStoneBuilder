<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.collections.ArrayCollection;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.SearchVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const PLAY : String = 'PLAY';
			static public const PRONOUNCE : String = 'PRONOUNCE';
			static public const SAVE : String = 'SAVE';
			public var s : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var filter : LessonItemVO = new LessonItemVO()
			public function set data(value:Object):void { 
				
				this.s.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				filter = value as LessonItemVO
				this.s.disableIfNull( value, new LessonItemVO, 'filter' )  
				this.updateItemRenderer()
			} 
			
			
			public function updateItemRenderer(e:Event=null) : void
			{
				txtName.text = this.filter.name.toString()
				
				this.txtName.text =this.filter.name 
				
				this.txtPic.text= this.filter.pic
				
				
				this.txtSound.text =this.filter.sound 
				this.txtPronunciation.text =this.filter.pronunciation 
				this.txtDesc.text =this.filter.desc
				if ( this.src.source == this.filter.sourceImg ) 
					this.src.source = null 
				this.src.source = this.filter.sourceImg	
				trace('folder', this.filter.sourceImg, 'me', this.filter  ); 
			}
			
			
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.filter ) ) ; 
			}			
			
			
			
			protected function onSave(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( SAVE, this.filter ) ) ; 
			}
			
			protected function onChange(event:TextOperationEvent):void
			{
				this.filter.name = this.txtName.text; 
				this.filter.pic = this.txtPic.text; 
				this.filter.sound = this.txtSound.text; 
				this.filter.desc = this.txtDesc.text; 
				this.filter.pronunciation = this.txtPronunciation.text; 
				this.src.source = this.txtPic.text; 
			}
			
			public function refresh() : void
			{
				this.updateItemRenderer()
			}
			
			protected function onPlay(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY, this.filter ) ) ; 
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	<!-- 
	<s:Rect id="bgRect" width="100%" height="100%" alpha.normal="0" >
	<s:fill>
	<s:SolidColor color="0x598E52" color.hovered="0x598E52" color.selected="0x36722E"/>
	</s:fill>
	</s:Rect>
	-->
	<s:VGroup >
		
		<s:Label text="Name:" />
		<s:TextInput id="txtName" change="onChange(event)" />
		<s:Label text="Description:" />
		<s:TextInput id="txtDesc" change="onChange(event)" />
		
		<s:Label text="Pic:" />
		<s:HGroup>
			<s:Image id="src" height="100" width="100" />
			<s:TextInput id="txtPic" change="onChange(event)" />
		</s:HGroup>
		<s:Label text="Sound:" />
		<s:HGroup>
		<s:TextInput id="txtSound" change="onChange(event)" />
			<s:Button label="Play" click="onPlay(event)" />
		</s:HGroup>
		<s:Label text="Pronunciation:" />
		<s:TextInput id="txtPronunciation" change="onChange(event)" />
		
		
		
		<!--		<s:Form>
		<s:FormItem label="Name" >
		<s:TextInput id="txtName" change="onChange(event)" />
		</s:FormItem>
		<s:FormItem label="Pic" >
		<s:HGroup>
		<s:TextInput id="txtPic" change="onChange(event)" />
		<s:Image id="src" height="100" width="100" />
		</s:HGroup>
		</s:FormItem>
		<s:FormItem label="Sound" >
		<s:TextInput id="txtSound" change="onChange(event)" />
		</s:FormItem>
		<s:FormItem label="Description" >
		<s:TextInput id="txtDesc" change="onChange(event)" />
		</s:FormItem>			
		</s:Form>-->
		<s:Button label="Save" click="onSave(event)" />
	</s:VGroup>
</s:Group>
