<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				height="100%" autoDrawBackground="false" creationComplete="onInit(event)">
	
	<fx:Script> 
		<![CDATA[ 
			import mx.events.FlexEvent;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.model.NightStandConstants;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const COPY_FILTER : String = 'COPY_FILTER';
			public static var width:Number;
			public static var height:Number;
			
			public var help : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var help1 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var help2 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var help3 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 			
			[Bindable] public var item : LessonItemVO = new LessonItemVO()
			override public function set data(value:Object):void { 
				super.data = value; 
				this.help.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				this.help1.listenForObj(value,LessonItemVO.PROMPT_IMAGE_CHANGED, this.onPromptImageChanged )
				this.help2.listenForObj(value,LessonItemVO.PROMPT_TEXT_CHANGED, this.onPromptTextChanged )
				this.help3.listenForObj(value,LessonItemVO.PROMPT_VISIBILITY_CHANGED, this.onPromptVisiblityChanged )
				
				item = value as LessonItemVO
				this.help.disableIfNull( value, new LessonItemVO, 'item' ) 
				this.updateItemRenderer()
				item.itemRenderer= this; 
				/* 	
				super.data = value; 
				if (value== null) 
				{
				this.filter.removeEventListener( LessonItemVO.UPDATED, this.updateItemRenderer ) 
				return; 
				}
				if ( this.filter != null ) 
				{
				this.filter.removeEventListener( LessonItemVO.UPDATED, this.updateItemRenderer ) 
				}
				
				filter = value as LessonItemVO
				filter.itemRenderer= this; 
				this.filter.addEventListener( LessonItemVO.UPDATED, this.updateItemRenderer , false, 0, true) 	
				this.updateItemRenderer() */
			} 
			
			
			public function updateItemRenderer(e:Event=null) : void
			{
				/* 		if ( e.currentTarget
				this.filter; */
				txtLbl.text = this.item.name.toString()
				
				/* 	this.lblCount.text = this.notebook.noteCount.toString();
				if ( this.notebook.name.toLowerCase() == 'all notebooks' ) 
				this.txtLbl.setStyle('fontStye', 'italic' ) 
				else
				this.txtLbl.setStyle('fontStyle', 'normal' ) */
				this.src.source = this.item.sourceImg; 
				//trace('height', this.height, this.holderInnerRect.height ) ; 
				trace('PlayerItemRenderer', this.src.source ) ; 
				/* 	if ( ) //if ( NightStandConstants.flex == false)
				{ */
				this.width = PlayerItemRenderer.width; 
				this.height = PlayerItemRenderer.height; 					
				/* 	} */
				this.groo.height = this.height 
				this.groo.width = this.width; 
				
				this.maskImageSize.height = this.holderContent.height - 20 -10 - this.holderLabel.height
				this.maskImageSize.width = this.holderLabel.width; 
				this.maskImageSize.height = this.height - 20 -10 - this.holderLabel.height 
				this.holderImage.height = this.height - 20 -10 - this.holderLabel.height
				this.maskImageSize.width = this.width-20-5; 
				this.src.width = this.width-20-5; 
				
				if ( this.selected == false && this.currentState == 'selected' ) 
					this.currentState = '' 
				
				this.onPromptImageChanged()
				this.onPromptTextChanged()
				this.onPromptVisiblityChanged(); 
				return;
			}
			protected function onInit(event:FlexEvent):void
			{
				/* if ( NightStandConstants.flex == false ) 
				{ */
				// TODO Auto-generated method stub
				//this.width = this.parentApplication.width -20
				txtLbl.setStyle('fontSize', this.txtLbl.getStyle('fontSize')*2 ) ;
				/* 	} */
			}
			
			
			
			protected function onUp():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_UP, this.item ) ) ; 
			}
			protected function onDown():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_DOWN, this.item ) ) ; 
			}
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.item ) ) ; 
			}			
			
			protected function onCopy():void
			{
				this.dispatchEvent( new CustomEvent( COPY_FILTER, this.item ) ) ; 
			}		
			
			private function onPromptImageChanged(e:Event=null):void
			{
				this.txtLbl.text = this.item.getPromptImage(); 
			}
			
			private function onPromptTextChanged(e:Event=null):void
			{
				this.txtLbl.text = this.item.getPromptText(); 
			}
			
			private function onPromptVisiblityChanged(e:Event=null):void
			{
				this.txtLbl.visible = this.item.showPrompt
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3"/>
		<!--
		<s:Group id="maskImg" width="{this.holderInnerRect.height-20-10-30}" width=""
		-->
		<s:Group id="maskImageSize">
			<s:Rect id="bgRect444" left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:SolidColor color="0xd2d2d2"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		
		<s:Transition toState="*">
			<s:Parallel>
				<s:Fade duration="350" easer="{sineIn}" targets="{[this.bgRect,bgRect2, this.src]}"/>
				<s:AnimateColor duration="350" easer="{sineIn}"
								targets="{[this.txtLbl , this.fillBgRect]}"/>
				<s:Move duration="350" easer="{sineIn}" targets="{[this.txtLbl ]}"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>		
	<s:Group id="groo">
		<!--<s:Group left="0" top="0" right="0" bottom="0" >
		<s:Rect id="bgRect4" left="0" top="0" right="0" bottom="0" 
		radiusX="10" radiusY="10" 
		bottomLeftRadiusX="0" bottomLeftRadiusY="0" bottomRightRadiusY="0" bottomRightRadiusX="0"
		>
		<s:fill>
		<s:SolidColor color="0xFF" />
		</s:fill>
		</s:Rect>
		</s:Group>
		
		-->
		
		<s:Rect id="bgRect2" left="0" right="0" top="0" bottom="0" bottomLeftRadiusX="0"
				bottomLeftRadiusY="0" bottomRightRadiusX="0" bottomRightRadiusY="0" radiusX="10"
				radiusY="10"
				alpha.hovered="1"
				alpha.normal="0">
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" weight="3"/>
			</s:stroke>
		</s:Rect>
		
		<s:Group id="holderInnerRect" left="8" right="8" top="8" bottom="8">
			<s:Rect id="bgRect" left="0" right="0" top="0" bottom="0" bottomLeftRadiusX="0"
					bottomLeftRadiusY="0" bottomRightRadiusX="0" bottomRightRadiusY="0" radiusX="8"
					radiusY="8"
					alpha.normal="1">
				<s:fill>
					<s:SolidColor id="fillBgRect" color="0xFFFFFF"
								  color.selected="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
			
			
			
			
			<s:VGroup id="holderContent" width="100%" paddingBottom="5" paddingLeft="5"
					  paddingRight="5" paddingTop="5">
				
				<s:Group id="holderLabel" width="100%" height="40">
					<s:Rect id="bgRect3" left="0" right="0" top="0" bottom="0" bottomLeftRadiusX="0"
							bottomLeftRadiusY="0" bottomRightRadiusX="0" bottomRightRadiusY="0"
							radiusX="5" radiusY="5">
						<s:fill>
							<s:SolidColor color="0xFAFAFA"/>
						</s:fill>
					</s:Rect>
					
					<s:Label id="txtLbl" x="5" width="100%" color="0" fontSize="12" paddingBottom="5"
							 paddingLeft="0" paddingRight="0" paddingTop="5" verticalCenter="0"
							 x.hovered="10" buttonMode.hovered="true" color.hovered="0x666666"
							 useHandCursor.hovered="true" lineHeight="18" 
							 color.selected="0"/>
					<s:filters>
						<s:DropShadowFilter alpha="0.6" angle="45.0" blurX="2.0" blurY="2.0"
											color="#E5E5E5" distance="1.0" hideObject="false"
											inner="false" knockout="false" quality="2" strength="1"
											alpha.selected="1"/> 
					</s:filters> 
				</s:Group>
				
				<!--<s:Label id="seperator" text="|" color="0x6E6E6E" />-->
				<!--
				<s:Group id="holderImage" left="8" top="8" right="8" bottom="8" >
				<s:Image id="src" left="8" top="8" right="8" bottom="8" /> 
				</s:Group>
				-->
				<s:Group id="holderImage" mask="{this.maskImageSize}">
					<s:Image id="src" x="0" y="-10" alpha="1"
							 alpha.hovered=".8"
							 alpha.selected=".8"/> 
					<!--<s:Label text="ASDFASDFAS" />-->
				</s:Group> 
				
			</s:VGroup>
			
		</s:Group>
		
	</s:Group>
	<!--	
	<s:Group id="groo" >
	<s:Rect id="bgRect88" left="0" top="0" right="0" bottom="0" 
	radiusX="10" radiusY="10" 
	bottomLeftRadiusX="0" bottomLeftRadiusY="0" bottomRightRadiusY="0" bottomRightRadiusX="0"
	>
	<s:fill>
	<s:SolidColor color="0xFF0000" />
	</s:fill>
	<s:stroke>
	<s:SolidColorStroke color="0x00FF00" weight="3" />
	</s:stroke>
	</s:Rect>
	</s:Group>
	-->
	
	
	<s:filters>
		<s:DropShadowFilter alpha="0.9" angle="45.0" blurX="4.0" blurY="4.0" color="#E5E5E5"
							distance="2.0" hideObject="false" inner="false" knockout="false"
							quality="2" strength="1"/> 
	</s:filters> 
</s:ItemRenderer>
