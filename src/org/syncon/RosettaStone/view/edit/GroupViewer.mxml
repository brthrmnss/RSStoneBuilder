<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false">
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.collections.ArrayCollection;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonGroupVO;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.LessonVO;
			import org.syncon.RosettaStone.vo.SearchVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const PLAY_ALL : String = 'PLAY_ALL';
			static public const PRONOUNCE : String = 'PRONOUNCE';
			static public const SAVE : String = 'SAVE';
			
			[Bindable] public var filter :   LessonGroupVO = new LessonGroupVO()
				public var help : ItemRendererHelpers = new ItemRendererHelpers(this); 
			override public function set data(value:Object):void { 
				super.data = value; 
				this.help.listenForObj(value,LessonGroupVO.UPDATED, this.updateItemRenderer )
				filter = value as LessonGroupVO
				this.help.disableIfNull( value, new LessonGroupVO, 'filter' )  
				this.updateItemRenderer()
			} 
			
			
			public function updateItemRenderer(e:Event=null) : void
			{
				txtName.text = this.filter.name.toString()
					
				 this.txtName.text =this.filter.name 
				 //this.txtPic.text= this.filter.pic 
				 this.txtDesc.text =this.filter.desc
				
				//this.src.source = this.txtPic.text; 					
			}
			
			
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.filter ) ) ; 
			}			
			
	 		
			
			protected function onSave(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( SAVE, this.filter ) ) ; 
			}
			
			protected function onChange(event:TextOperationEvent):void
			{
				this.filter.name = this.txtName.text; 
				//this.filter.pic = this.txtPic.text; 
				this.filter.desc = this.txtDesc.text; 
				
				//this.src.source = this.txtPic.text; 
				
				this.filter.update();
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
<!-- 
	<s:Rect id="bgRect" width="100%" height="100%" alpha.normal="0" >
		<s:fill>
			<s:SolidColor color="0x598E52" color.hovered="0x598E52" color.selected="0x36722E"/>
		</s:fill>
	</s:Rect>
	-->
	<s:VGroup  >
 
		<s:Label text="Name:" />
		<s:TextInput id="txtName" change="onChange(event)" />
		<!--
		<s:Label text="Pic:" />
		<s:Image id="src" height="100" width="100" />
		<s:TextInput id="txtPic" change="onChange(event)" />-->
		<!--
		<s:Label text="Sound:" />
		<s:TextInput id="txtSound" change="onChange(event)" />
		-->
		<s:Label text="Description:" />
		<s:TextInput id="txtDesc" change="onChange(event)" />
		
		 <!--<s:Button label="Save" click="onSave(event)" />-->
	</s:VGroup>
</s:ItemRenderer>
