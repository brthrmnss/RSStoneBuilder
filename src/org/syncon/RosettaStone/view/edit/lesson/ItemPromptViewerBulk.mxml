<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.core.UIComponent;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.PromptDefinitionVO;
			import org.syncon.RosettaStone.vo.PromptVO;
			
			import spark.events.TextOperationEvent;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const SELECT_PROMPT : String = 'SELECT_PROMPT';
			static public const PLAY : String = 'PLAY_SOUND';
			static public const PRONOUNCE : String = 'PRONOUNCE';
			static public const SAVE : String = 'SAVE';
			
			public var s : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var s1 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var s2 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			
			[Bindable] public var item : LessonItemVO = new LessonItemVO()
			public var prompt : PromptVO = null; //new PromptVO();
			
			public function set data(value:Object):void { 
				if ( value == item ) 
					return ; 
				
				this.s.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				this.s1.listenForObj(value,LessonItemVO.CURRENT_PROMPT_CHANGED, this.onCurrentPromptChanged )
				
				item = value as LessonItemVO
		/* 		if ( item != null ) 
				{
					this.prompt = this.item.currentPrompt; 
					if ( this.prompt != null ) 
						this.s2.listenForObj(prompt.def,PromptDefinitionVO.UPDATED, this.updateItemRenderer )
				}	 */
				this.s.disableIfNull( value, new LessonItemVO, 'item' )  
				this.updateItemRenderer()
			} 
			
			public function onCurrentPromptChanged(e:Event) : void
			{
				this.updateItemRenderer()
				return;
			}
			public function updateItemRenderer(e:Event=null) : void
			{
				this.includeInLayout = false; 
				this.visible = false; 
				if ( this.item.currentPrompt != null ) 
				{
					this.includeInLayout = true; 
					this.visible = true; 
				}
				else
				{
					return;
				}
				//surpression here? 
				//if ( this.item.currentPrompt == lastPrompt ) 
				//	return; 
				
				this.prompt = this.item.currentPrompt; 
				if ( this.prompt != null ) 
					this.s2.listenForObj(prompt.def,PromptDefinitionVO.UPDATED, this.updateItemRenderer )
				
				var txtData : String = this.item.getPromptData(this.prompt.name, false );  
				var txtDataWithFolder : String = this.item.getPromptData(this.prompt.name,true);  
				this.txtPromptData.text =txtData
				if ( prompt.def.isPic ) 
				{
					if ( this.src.source == txtDataWithFolder  ) 
						this.src.source = null 

					this.src.source =txtDataWithFolder
					if ( txtData == '' ) 
						this.src.source = null; 
					
					this.src.visible = true; 	
					this.includeUI(src)
				}
				else
				{
					this.excludeUI(src)
				}
				if ( prompt.def.isSound ) 
				{
					this.includeUI(btnPlay)
				}
				else
				{
					this.excludeUI(btnPlay)
				}
				if ( prompt.def.isMovie ) 
				{
					this.includeUI(btnView)
				}
				else
				{
					this.excludeUI(btnView)
				}
				/* 
				if ( this.src.source == this.item.getPromptImage()    ) 
				this.src.source = null 
				this.src.source = this.item.getPromptImage();  
				*/
			}
			
			
			protected function onSave(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( SAVE, this.item ) ) ; 
			}
			
			protected function onChange(event:TextOperationEvent):void
			{
				this.item.currentPrompt.data = this.txtPromptData.text; 
				this.refresh(); 
			}
			
			public function refresh() : void
			{
				this.updateItemRenderer()
			}
			
			protected function onPlay(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY, [this.item,this.item.sound]  ) ) ; 
			}
			protected function onPlay_Other(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY, [this.item,this.item.getPromptData(null, false)]  ) ) ; 
			}
			
			private function includeUI(src:UIComponent):void
			{
				src.includeInLayout = true
				src.visible = true
			}
			
			private function excludeUI(src:UIComponent):void
			{
				src.includeInLayout = false
				src.visible = false
			}
		]]> 
	</fx:Script> 
	
	<s:HGroup  id="dd">
		
		<s:TextInput id="txtPromptData" change="onChange(event)" />
		
		<s:Group id="holderPlayItems">
			<s:Image id="src" height="20" width="20" />
			<s:Button id="btnPlay" label="Play" click="onPlay_Other(event)" />
			<s:Button id="btnView" label="Play" click="onPlay_Other(event)" />
			
			
			<!--<s:Button  id="" label="p" click="	onPlay_Other(event)" />
			-->
		</s:Group>
		<!--
		<s:Button label="Save" click="onSave(event)" />-->
	</s:HGroup>
</s:Group>