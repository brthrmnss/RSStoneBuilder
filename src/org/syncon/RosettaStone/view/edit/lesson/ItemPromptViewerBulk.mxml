<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	
	
	<fx:Script> 
		<![CDATA[ 
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.PromptVO;
			
			import spark.events.TextOperationEvent;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const SELECT_PROMPT : String = 'SELECT_PROMPT';
			static public const PLAY : String = 'PLAY_SOUND';
			static public const PRONOUNCE : String = 'PRONOUNCE';
			static public const SAVE : String = 'SAVE';
			
			public var s : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			public var s1 : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var item : LessonItemVO = new LessonItemVO()
			//public var prompt : PromptVO = null; //new PromptVO(); 
			public function set data(value:Object):void { 
				if ( value == item ) 
					return ; 
				
				this.s.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				this.s1.listenForObj(value,LessonItemVO.CURRENT_PROMPT_CHANGED, this.onCurrentPromptChanged )
				item = value as LessonItemVO
				this.s.disableIfNull( value, new LessonItemVO, 'item' )  
				this.updateItemRenderer()
			} 
			
			public function onCurrentPromptChanged(e:Event) : void
			{
				this.updateItemRenderer()
				return;
			}
			public function updateItemRenderer(e:Event=null) : void
			{
				this.includeInLayout = false; 
				this.visible = false; 
				if ( this.item.currentPrompt != null ) 
				{
					this.includeInLayout = true; 
					this.visible = true; 
				}
				else
				{
					return;
				}
				
				
				this.txtPrompt.text =this.item.getPromptText()//this.item.currentPrompt);  
				this.txtPic.text =this.item.getPromptImage(null, false)//this.item.currentPrompt);  
				this.txtSound.text =this.item.getPromptSound(null, false)//this.prompt.name);  
				//this.txtPronunciation.text =this.item.getPromptOther()//this.prompt.name);  
				this.txtOther.text =this.item.getPromptOther(null, false)
				/* 	this.txtPronunciation.text =this.item.pronunciation 
				this.txtDesc.text =this.item.desc */
				if ( this.src.source == this.item.getPromptImage()    ) 
					this.src.source = null 
				this.src.source = this.item.getPromptImage();  
			}
			
			
			protected function onSave(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( SAVE, this.item ) ) ; 
			}
			
			protected function onChange(event:TextOperationEvent):void
			{
				this.item.currentPrompt.prompt = this.txtPrompt.text; 
				this.item.currentPrompt.image = this.txtPic.text; 
				this.item.currentPrompt.sound = this.txtSound.text; 
				this.item.currentPrompt.other = this.txtOther.text; 
			}
			
			public function refresh() : void
			{
				this.updateItemRenderer()
			}
			
			protected function onPlay(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY, [this.item,this.item.sound]  ) ) ; 
			}
			protected function onPlay_Other(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY, [this.item,this.item.currentPrompt.other]  ) ) ; 
			}
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	<!-- 
	<s:Rect id="bgRect" width="100%" height="100%" alpha.normal="0" >
	<s:fill>
	<s:SolidColor color="0x598E52" color.hovered="0x598E52" color.selected="0x36722E"/>
	</s:fill>
	</s:Rect>
	-->
	
	<s:HGroup  id="dd">
		
		<s:Label text="P:" />
		<s:TextInput id="txtPrompt" change="onChange(event)" />
		<s:Label text="Pic:" />
		<s:HGroup>
			<s:Image id="src" height="25" width="25" />
			<s:TextInput id="txtPic" change="onChange(event)" />
		</s:HGroup>
		<s:Label text="S:" />
		<s:HGroup>
			<s:TextInput id="txtSound" change="onChange(event)" />
			<s:Button label="Play" click="onPlay(event)" />
		</s:HGroup>
		<s:Label text="O:" />
		<s:TextInput id="txtOther" change="onChange(event)" />
		<s:Button label="p" click="	onPlay_Other(event)" />
	
		<s:Button label="Save" click="onSave(event)" />
	</s:HGroup>
</s:Group>
