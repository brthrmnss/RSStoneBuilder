<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"   creationComplete="onInit(event)"
		 >
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.SearchVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const DATA_CHANGED : String = 'DATA_CHANGED';
			static public const PLAY_PROMPT : String = 'PLAY_PROMPT';
			static public const PRONOUNCE : String = 'PRONOUNCE';
			static public const SAVE : String = 'SAVE';
			public var s : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var filter : LessonItemVO = new LessonItemVO()
			public function set data(value:Object):void { 
				
				this.s.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				filter = value as LessonItemVO
				this.s.disableIfNull( value, new LessonItemVO, 'filter' )  
				this.updateItemRenderer()
					
					this.dispatchEvent( new Event(DATA_CHANGED)); 
			} 
			
			
			public function updateItemRenderer(e:Event=null) : void
			{
				
				this.txtPrompt.text =this.filter.name 
				/* if ( this.src.source == this.filter.sourceImg ) 
					this.src.source = null 
				this.src.source = this.filter.sourceImg	
				trace('folder', this.filter.sourceImg, 'me', this.filter  );  */
			}
			
			protected function onInit(event:FlexEvent):void
			{
				/* if ( NightStandConstants.flex == false ) 
				{ */
				// TODO Auto-generated method stub
				//this.width = this.parentApplication.width -20
				txtPrompt.setStyle('fontSize', this.txtPrompt.getStyle('fontSize')*2 ) ;
				/* 	} */
			}
			
			
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.filter ) ) ; 
			}			
			
			
			
			protected function onSave(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( SAVE, this.filter ) ) ; 
			}
 
			
			public function refresh() : void
			{
				this.updateItemRenderer()
			}
			
			protected function onPlayPrompt(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY_PROMPT, this.filter ) ) ; 
			}
			
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3" />
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	<!--  
	<s:Rect id="bgRect" width="100%" height="100%" alpha.normal="0" >
	<s:fill>
	<s:SolidColor color="0x598E52" color.hovered="0x598E52" color.selected="0x36722E"/>
	</s:fill>
	</s:Rect>
	-->
	
	<s:HGroup verticalAlign="top" minHeight="80">
		<s:Button   icon="assets/buttons/play.png"    click="onPlayPrompt(event)" />
		<s:Label id="txtPrompt"  fontSize="16"  />
		<!--<s:Image  source="assets/buttons/Metro-Listen-Blue-64.png"   />-->
	</s:HGroup>
</s:Group>
