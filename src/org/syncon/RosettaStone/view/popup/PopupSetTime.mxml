<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:popup="org.syncon.evernote.basic.view.popup.*"
					  xmlns:popup1="org.syncon.NightStand.view.popup.*"
					  xmlns:view="org.syncon2.utils.mobile.view.*"
					  creationComplete="onInit()" backgroundAlpha="0.0"
					  implements="org.syncon.popups.view.IPopup" xmlns:popup2="org.syncon.RosettaStone.view.popup.*">
	
	<fx:Metadata> 
		[Event(name="cancel", type="flash.events.Event")] 		
		[Event(name="ok", type="flash.events.Event")] 
	</fx:Metadata> 	
	
	<fx:Script>
		<![CDATA[
			import org.syncon.RosettaStone.model.CustomEvent;
			
			import spark.events.IndexChangeEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const OK : String = 'save'; 	
			static public const CANCEL : String = 'cancel'; 	
			static public const SETUP : String = 'setup'; 				
			public var creationComplete : Boolean = false; 
			
			public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
				
				var arr : Array = [
					['Set', this.onSave], 
					['Cancel', this.onCancel], 
				]
				this.bottomMenu.load('', arr )
			}
			
			public  function create(app:Object)  : IPopup
			{
				var popup :  PopupTextArea = new PopupTextArea()
				popup.popupCode =  PopupCode.Create( popup ,app ) 
				return popup			
			} 
			
			private var _popupCode :   PopupCode; 
			public function get  popupCode () : PopupCode { return _popupCode  } 
			public function set  popupCode ( _popupCode_ : PopupCode) : void {   _popupCode = _popupCode_  } 
			
			public function show()  : void
			{
				this.popupCode.open( false, false ) 
				
			}
			public function hide( ) : void
			{
				this.popupCode.close() 
			}
			
			
			protected function onSave(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( OK) ) 
			}
			
			protected function onCancel(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( CANCEL ) ) 
			}
			
			public function updateLocation( currentLister_doNotReset : Object = null )  : void
			{
				/*
				//dont' move to me if i'm not the current one? 
				if ( currentLister_doNotReset != null && this.onenote_list != currentLister_doNotReset ) 
				return 
				this.popupCode.moveToComponent(  this.partial.leftEdgeUI, 'tl',  this.tween, false, true, -this.width-5 ) 
				*/
			}
			
			public var args : Array = [] ; 
			public function selectTime(title : String,  date : Date,  fxDone : Function  ) : void
			{
				this.resize(); 
				
				if ( date == null ) 
					date = new Date()
				this.txtHour.text = date.getHours().toString()
				this.txtMin.text = date.getMinutes().toString()
				
				this.args = [date, fxDone ]
				
				this.dispatchEvent( new Event (SETUP   )) 
				this.show()
				this.header.label = title; 
			}
			
			protected function listChangeHandler(event:IndexChangeEvent):void
			{
				var index:int = event.newIndex;
				/* 	if ( index > -1 ) 
				var item :      Object = this.list.dataProvider.getItemAt( index )    */
				//	this.dispatchEvent( new   CustomEvent( LIST_CHANGED, item , false ) ) ; 
			}
			
			public function resize(wait:Boolean=true):void
			{
				if ( wait ) 
				{
					this.callLater( this.resize, [false] )
					return
				}
				this.parentApplication.width; 
				this.parentApplication.height; 
				//this.height = this.parentApplication.height-40-40
				//this.list.height = this.height - this.header.height - 30 + 30 - 60 + +20 - this.bottomMenu.height; 
				this.width = this.parentApplication.width-40//-40
				this.popupCode.center(); 
				
				this.txtHour.width = this.parentApplication.width * .3
				this.txtMin.width = this.parentApplication.width * .3
				
				
			}
			
			protected function upHour_clickHandler(event:MouseEvent):void
			{
				//this.numberValidator.validate().
				var hour : Number = Number( this.txtHour.text )  
				if ( hour >= 23 ) 
					hour = -1
				this.txtHour.text = (hour + 1 ).toString()
			}
			
			protected function downHour_clickHandler(event:MouseEvent):void
			{
				
				var hour : Number = Number( this.txtHour.text )  
				if ( hour >=24 )
					hour = 24
				if ( hour <= 0 ) 
					hour = 24
				this.txtHour.text = (hour - 1 ).toString()
				
			}
			
			
			protected function upMin_clickHandler(event:MouseEvent):void
			{
				var min : Number = Number( this.txtMin.text )  
				if ( min >= 59 ) 
					min = -1
				this.txtMin.text = (min + 1 ).toString()
			}
			
			protected function downMin_clickHandler(event:MouseEvent):void
			{
				
				var min : Number = Number( this.txtMin.text )  
				if ( min >=60 )
					min = 60
				if ( min <= 0 ) 
					min = 60
				this.txtMin.text = (min - 1 ).toString()
				
			}
			public  function getDate( ): Date
			{
				var hour : Number = Number( this.txtHour.text )  
				var min : Number = Number( this.txtMin.text )  
				var d : Date = new Date()
				d.setHours( hour, min)
				return d; 
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:NumberValidator id="numberValidator" source='{this.txtMin}' 
						   property="text" trigger='{txtMin}' maxValue="59" minValue="1"
						   triggerEvent="change" />
		<s:NumberValidator id="numberValidato2r" source='{this.txtHour}' 
						   property="text" trigger='{txtHour}' maxValue="23" minValue="1"
						   triggerEvent="change" />
	</fx:Declarations>
	<!--	
	<s:Rect width="100%" height="100%" >
	<s:stroke>
	<s:SolidColorStroke color="0" />
	</s:stroke>
	</s:Rect>-->
	
	
	<popup2:PopupBg/>
	
	<s:VGroup paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15"  width="100%">
		<!--
		<popup:PopupHeader  label.edit="Edit Tag" label="New Tag" padding="0"  width="100%"/>
		-->
		<popup2:PopupHeader id="header" label="Repeat" width="100%" />
		<s:HGroup horizontalAlign="center" width="100%">
			<s:VGroup width="30%">
				<s:Button id="upHour" click="upHour_clickHandler(event)"  label="+"  width="100%" />
				<s:TextInput id="txtHour" width="100%" 
							 maxChars="2"  restrict="0-9\\-\\.\\,"  contentBackgroundColor="0xFFFFFF" />
				<s:Button id="downHour"  click="downHour_clickHandler(event)" label="-" width="100%" />
			</s:VGroup>
			<s:VGroup  width="30%">
				<s:Button id="upMin"   click="upMin_clickHandler(event)"  label="+" width="100%" />
				<s:TextInput id="txtMin" width="100%" 
							 maxChars="2"  restrict="0-9\\-\\.\\,"    contentBackgroundColor="0xFFFFFF" />
				<s:Button id="downMin" click="downMin_clickHandler(event)"  label="-" width="100%" />
			</s:VGroup>
			
		</s:HGroup>
		<!--<s:List id="list" width="100%"  height="100%"  change="listChangeHandler(event)"
		contentBackgroundAlpha="0" contentBackgroundColor="#FFFFFF"
		itemRenderer="org.syncon.NightStand.view.popup.RadioListRenderer">
		<s:layout>
		<s:VerticalLayout gap="0" paddingLeft="0"/>
		</s:layout> 
		</s:List>-->
		
		<popup2:PopupBottomBarBg  id="bottomMenu"/>
	</s:VGroup>
	
</s:SkinnableContainer>
