<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:popup1="org.syncon.NightStand.view.popup.*"
					  width="100%" height="100%" backgroundAlpha="0.0" creationComplete="onInit()"
					  implements="org.syncon.popups.view.IPopup" xmlns:popup="org.syncon.RosettaStone.view.popup.*" xmlns:mobile="org.syncon.RosettaStone.view.mobile.*" xmlns:search="org.syncon.RosettaStone.view.edit.search.*" xmlns:rs="org.syncon.RosettaStone.view.popup.rs.*" xmlns:edit="org.syncon.RosettaStone.view.edit.*">
	
	<fx:Metadata> 
		[Event(name="cancel", type="flash.events.Event")] 		
		[Event(name="setup", type="flash.events.Event")] 
	</fx:Metadata> 	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.LessonResultVO;
			import org.syncon.RosettaStone.vo.LessonVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const OK : String = 'save'; 	
			static public const CANCEL : String = 'cancel'; 	
			static public const SETUP : String = 'setup'; 	
			
			static public const NEXT_ITEM : String = 'NEXT_LESSON'; 	
			static public const CHANGE_ITEM : String = 'CHANGE_ITEM_OF_VARS'; 	
			
			public var creationComplete : Boolean = false; 
			public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
				this.visible = false; 
				
				var items : Array = [ this.searchPic,  this.searchDictionary, this.searchSounds, 
					this.searchYoutube] 
				this.viewSelector.items = items
					//b/c you select the words as givein 
					//b/c search sound dones't have value right now 
				this.viewSelector.hideUI( [this.searchSounds, this.searchDictionary] ) 
			}
			
			public  function create(app:Object)  : IPopup
			{
				var popup :  PopupSelectionResult = new PopupSelectionResult()
				popup.popupCode =  PopupCode.Create( popup ,app ) 
				return popup			
			} 
			
			private var _popupCode :   PopupCode; 
			public function get  popupCode () : PopupCode { return _popupCode  } 
			public function set  popupCode ( _popupCode_ : PopupCode) : void {   _popupCode = _popupCode_  } 
			
			public function show()  : void
			{
				this.popupCode.open( false,false  ) ;  
			}
			public function hide( ) : void
			{
				this.popupCode.close() 
			}
			
			
			protected function onSave(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( OK) ) 
			}
			
			protected function onCancel(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( CANCEL ) ) 
			}
			
			
			public var args : Array = [] ; 
			private var fxDone:Function;
			public var lesson : LessonVO
			public function goTo(   goToUI :  UIComponent , arr : Array= null) : void
			{
				this.popupCode.moveToComponent( goToUI, 'bl', false,false, true, 20 ) ; 
				this.y = (this.parentApplication.height-this.height)/2
				/* this.width =  this.parentApplication.width*.8
				this.height =  this.parentApplication.height*.8 */

				this.lesson = lesson;
				if ( arr != null && arr.length > 0 ) 
				{
					//this.listSelectedIndex = 0 ; 
					this.list.dataProvider = new ArrayCollection( arr ) ;
					this.holderList.includeInLayout = true; 
					this.holderList.visible = true; 
					
				}
				else
				{
					this.holderList.includeInLayout = false; 
					this.holderList.visible = false; 
				}
				
				this.show()
				this.fxDone = fxDone; 
				this.dispatchEvent( new Event (SETUP   )) 
			}
 		
			protected function list_changeHandler(event: IndexChangeEvent):void
			{
				
				if ( event.newIndex == -1 ) return; 
				
				  this.dispatchEvent( new CustomEvent( CHANGE_ITEM,  
				this.list.dataProvider.getItemAt(event.newIndex)  ) )  
			}
			
			protected function onNextItem(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				this.dispatchEvent( new Event( NEXT_ITEM ) )  
			}
			
			protected function onChangeTxtQueryPre(event:Event):void
			{
				// TODO Auto-generated method stub
				this.searchYoutube.txtPre = this.txtQueryPre.text; 
			}
			
		]]>
	</fx:Script>
	
	
	<!--	<s:Rect width="100%" height="100%" >
	<s:stroke>
	<s:SolidColorStroke color="0xFFFFFF" alpha="0.3" />
	</s:stroke>
	</s:Rect> -->
	<popup:PopupBgWhite alpha="1"/>
	<s:Group width="100%" height="100%" > 
		<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"  >
			<s:Label text="Search" />
			<s:HGroup  >
				<!--<rs:ListItemsSelectable  id="list"/>-->
				<s:VGroup id="holderList">
					<s:Button  label="Next" click="onNextItem(event)" />
					
					<s:List id="list" width="100%" borderVisible="false"
							change="list_changeHandler(event)" contentBackgroundAlpha="0"
							itemRenderer="org.syncon.RosettaStone.view.popup.rs.PopupUpdateMultipleItemBulkRenderer">
						<s:layout>
							<s:VerticalLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0"/>
						</s:layout>
					</s:List>
				</s:VGroup>
				<s:VGroup>
					<s:HGroup>
						<!-- <s:CheckBox id="chkPics" change="onChangeVisible" /> -->
						<edit:ViewSelector id="viewSelector"/>
						<s:TextInput toolTip="Text Query Pre" id="txtQueryPre"  enter="onChangeTxtQueryPre(event)"/>
					</s:HGroup>
					<s:HGroup>
						<search:SearchPics    id="searchPic" height="200" name="Search Pics"/>
						<search:SearchDictionary  id="searchDictionary" name="Search Dictionary"/>
						<search:SearchSounds    id="searchSounds" name="Search Sounds"/>
						<search:SearchYoutube   id="searchYoutube" name="Search Youtube" />
					</s:HGroup>
				</s:VGroup>

			</s:HGroup>
		</s:VGroup>
		
	</s:Group>
	<s:Button label="x" click="{this.onCancel()}" right="10" top="10" />
</s:SkinnableContainer>
