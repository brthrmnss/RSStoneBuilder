<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				height="30" autoDrawBackground="false" xmlns:lesson="org.syncon.RosettaStone.view.edit.lesson.*">
	
	
	<fx:Script> 
		<![CDATA[ 
			import org.syncon.RosettaStone.model.CustomEvent;
			import org.syncon.RosettaStone.vo.ItemRendererHelpers;
			import org.syncon.RosettaStone.vo.LessonItemVO;
			import org.syncon.RosettaStone.vo.LessonVO;
			static public const MOVE_UP : String = 'MOVE_UP.f'; 
			static public const MOVE_DOWN : String = 'MOVE_DOWN.f' ; 
			static public const DELETE : String = 'DELETE.f'; //export before delete 
			static public const CHANGED_FILTER_FROM_RENDERER : String = 'CHANGED_FILTER';
			static public const COPY_FILTER : String = 'COPY_FILTER';
			static public const PLAY_ITEM : String = 'PLAY_ITEM';
			
			public var help : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var item : LessonItemVO = new LessonItemVO()
			
			override public function set data(value:Object):void { 
				if ( data == value ) 
					return; 
				super.data = value;
				this.prompt.data = value; 
				
				this.help.listenForObj(value,LessonItemVO.UPDATED, this.updateItemRenderer )
				item = value as LessonItemVO
				this.help.disableIfNull( value, new LessonItemVO, 'item' )  
				this.help.setupParent( this.owner ) ;
				this.help.fxSetup( this.btnUp, this.btnDown, this.btnDelete  ) ; 
				this.updateItemRenderer()
				item.itemRendererEdit= this; 
			} 
			
			
			public function updateItemRenderer(e:Event=null)  : void
			{
				
				if (this.selected == false && this.currentState == 'selected' )
					this.currentState = ''; 
				
				this.txtName.text = this.item.name.toString()
				this.txtPic.text= this.item.pic
				this.txtSound.text =this.item.sound 
				this.txtPronunciation.text =this.item.pronunciation 
				this.txtDesc.text =this.item.desc
					
				if ( this.src.source == this.item.sourceImg ) 
					this.src.source = null 
				this.src.source = this.item.sourceImg	
					 
				this.chk_boxSelected.selected    = this.item.editSelected  
			}
			
			protected function onUp():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_UP, this.item ) ) ; 
			}
			protected function onDown():void
			{
				this.dispatchEvent( new CustomEvent( MOVE_DOWN, this.item ) ) ; 
			}
			protected function onDelete():void
			{
				this.dispatchEvent( new CustomEvent( DELETE, this.item ) ) ; 
			}			
			
			protected function onCopy():void
			{
				this.dispatchEvent( new CustomEvent( COPY_FILTER, this.item ) ) ; 
			}		
			
			protected function ch_Visible_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function onChange(event:Event):void
			{
				this.item.name = this.txtName.text; 
				this.item.pic = this.txtPic.text; 
				this.item.sound = this.txtSound.text; 
				this.item.desc = this.txtDesc.text; 
				this.item.pronunciation = this.txtPronunciation.text; 
				if ( this.src.source == this.item.sourceImg ) 
					this.src.source = null 
				this.src.source = this.item.sourceImg	
			
			}
			
			
			protected function onPlay(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( PLAY_ITEM, this.item ) ) ; 
			}
			
			protected function chk_boxSelected_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				this.item.editSelected = this.chk_boxSelected.selected; 
			}
			public  function set disableTransitions(b:Boolean):void
			{
			//	if ( b == true ) 
				this.targeter.targets = [] ; 
			}
			
			
			
		]]> 
	</fx:Script> 
	
	<fx:Declarations>
		<s:Sine id="sineIn" easeInFraction="0.3"/>
	</fx:Declarations>	
	<!--	<s:layout>
	<s:HorizontalLayout gap="3"/>
	</s:layout>-->
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		
		<s:Transition toState="*">
			<s:Fade duration="350" easer="{sineIn}"  id="targeter"  targets="{[this.bgRect]}"/>
		</s:Transition>
		
		
		<s:Transition toState="*">
			<s:AnimateColor duration="350" easer="{this.sineIn}"
							targets="{[this.txtName, this.txtDesc ]}"/>
		</s:Transition>		
		
	</s:transitions>		
	
	<s:Rect id="bgRect" width="100%" height="100%"
			alpha.normal="0">
		<s:fill>
			<s:SolidColor color="0x598E52"
						  color.hovered="0x598E52"
						  color.selected="0x36722E"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup paddingLeft="5" paddingRight="5" verticalAlign="middle" verticalCenter="0">
		<s:CheckBox id="chk_boxSelected" change="chk_boxSelected_changeHandler(event)" />
		<!--<s:Label id="seperator" text="|" color="0x6E6E6E"  />-->
		<s:TextInput id="txtName" x="5" width="160" color="0" fontSize="12" verticalCenter="0"
					 change="onChange(event)" />
		<s:TextInput id="txtDesc" width="15" color="0" fontSize="12"  verticalCenter="0"
					 change="onChange(event)" />
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="P:" />
			<s:Image id="src" height="20" width="20" />
			<s:TextInput id="txtPic" change="onChange(event)" />
			<s:Label text="S:" />
			<s:TextInput id="txtSound" change="onChange(event)" />
			<s:Button label="Play" click="onPlay(event)" />
			<s:Label text="Pr:" />
			<s:TextInput id="txtPronunciation" change="onChange(event)" />
		</s:HGroup>
		<lesson:ItemPromptViewerBulk id="prompt" />
		<s:CheckBox id="ch_Visible" change="ch_Visible_changeHandler(event)"/>
		<s:Button width="30" label="U"  id="btnUp" click="onUp()"/>
		<s:Button width="30" label="D"  id="btnDown" click="onDown()"/>
		<s:Button width="30" label="X"  id="btnDelete" click="onDelete()"/>		
	</s:HGroup>
</s:ItemRenderer>
